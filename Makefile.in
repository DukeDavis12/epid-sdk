#!/usr/bin/make -f

#variables are set by configure
prefix = @prefix@
installdir = $(prefix)/
epidinstalldir = $(installdir)/epid-sdk
CC = @CC@
CXX = @CXX@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
RANLIB = @RANLIB@
CONFIG = @CONFIG@

#set performance affecting flags
ifeq ($(CONFIG),release)
	SIZE_CFLAGS := -O2
else
	SIZE_CFLAGS := -Os
	ifeq ($(findstring icc,$(CC)),icc)
		ifeq ($(findstring -m32,$(CFLAGS)),-m32)
			SIZE_CFLAGS := -O2
		endif
	endif
	SIZE_CFLAGS += -fdata-sections -ffunction-sections
	LDFLAGS += -Xlinker --gc-sections
endif

#gcc flags
CC_FLAGS := $(CFLAGS) $(SIZE_CFLAGS) -Werror -Wall -Wextra -Wno-missing-braces \
	-Wno-missing-field-initializers -Wno-unknown-pragmas -Wno-unused-function \
	-fno-strict-aliasing -Wno-unused-but-set-variable -Wno-comment -Wformat \
	-Wformat-security -fstack-protector -fPIC -DNDEBUG -D_FORTIFY_SOURCE=2
#g++ flags
CXX_FLAGS := $(CC_FLAGS) -std=c++0x

#intel c compiler flags
ICC_FLAGS := $(CFLAGS) $(SIZE_CFLAGS) -Werror -Wall -Wextra -DNDEBUG \
	-fstack-protector -fPIC -D_FORTIFY_SOURCE=2 \
	-Wformat -Wformat-security
#intel c++ compiler flags
ICPC_FLAGS := $(ICC_FLAGS) -std=c++0x

#check if architecture was specified
#or take it by shell command
ifeq ($(findstring -m32,$(CFLAGS)),-m32)
	ARCH = x86
	CXXFLAGS += -m32
	LDFLAGS += -m32
else ifeq ($(findstring -m64,$(CFLAGS)),-m64)
	ARCH = x86_64
	CXXFLAGS += -m64
	LDFLAGS += -m64
else
	ifeq ($(findstring arm-,$(CC)),arm-)
		ARCH = arm

		ifneq (,$(findstring gnueabihf,$(CC)))
			ARCH := $(addsuffix hf,$(ARCH))
		endif

	else
		ARCH := $(shell uname -m)
	endif
endif

#set ippflags
IPP_FLAGS := -Wno-misleading-indentation -D_IPP_v50_ -D_IPP_DEBUG \
	-D_DISABLE_ALG_MD5_ -D_DISABLE_ALG_SM3_

#set tools and flags depending on specified compiler
ifeq ($(findstring icc,$(CC)),icc)
	CFLAGS := $(ICC_FLAGS)
	CXXFLAGS := $(ICPC_FLAGS)
	AR = $(subst icc,xiar,$(CC))
else
	CFLAGS := $(CC_FLAGS)
	CXXFLAGS := $(CXX_FLAGS)
endif

# ld flags
LDFLAGS += -fstack-protector -z noexecstack -z relro -z now -pie

#gtest defines
GTEST_DEFINES := -DGTEST_HAS_PTHREAD=0 -D_VARIADIC_MAX=10

#set flags for unit tests executables
GTEST_FLAGS = --gtest_color=yes \
	--gtest_print_time=1 \
	--gtest_output=xml

export CC LDFLAGS ARCH CFLAGS
export CXX CXXFLAGS
export AR RANLIB
export epidinstalldir
export GTEST_FLAGS GTEST_DEFINES IPP_FLAGS

#just output
$(info $$ccompiler is [${CC}])
$(info $$cxxcompiler is [${CXX}])
$(info $$architecture is [${ARCH}])

#targets part
all: ipp common member verifier dropt examples_util examples epid_tools

clean:
	$(MAKE) -C ./ext/ipp/sources/ippcp clean
	$(MAKE) -C ./epid/common/ clean
	$(MAKE) -C ./epid/member/ clean
	$(MAKE) -C ./epid/verifier/ clean
	$(MAKE) -C ./example/util/ clean
	$(MAKE) -C ./example/ clean
	$(MAKE) -C ./tools/ clean
	$(MAKE) -C ./ext/gtest/ clean
	$(MAKE) -C ./epid/common-testhelper/ clean
	$(MAKE) -C ./ext/dropt/ clean
ifneq ("$(wildcard ./ext/google_benchmark)","")
	$(MAKE) -C ./ext/google_benchmark/ clean
endif

install:
	$(MAKE) -C ./ext/ipp/sources/ippcp install
	$(MAKE) -C ./epid/common/ install
	$(MAKE) -C ./epid/member/ install
	$(MAKE) -C ./epid/verifier/ install
	$(MAKE) -C ./example/ install
	$(MAKE) -C ./tools/ install
	$(MAKE) -C ./epid/common-testhelper/ install

uninstall:
	rm -rf  $(epidinstalldir)

ipp:
	$(MAKE) -C ./ext/ipp/sources/ippcp all

common:
	$(MAKE) -C ./epid/common/ all

member:
	$(MAKE) -C ./epid/member/ all

verifier:
	$(MAKE) -C ./epid/verifier/ all

dropt:
	$(MAKE) -C ./ext/dropt/ all

examples_util:
	$(MAKE) -C ./example/util/ all

utest:
	$(MAKE) -C ./ext/gtest/ all
	$(MAKE) -C ./epid/common-testhelper/ all
	$(MAKE) -C ./epid/common-testhelper/ utest
	$(MAKE) -C ./epid/common/ utest
	$(MAKE) -C ./epid/member/ utest
	$(MAKE) -C ./epid/verifier/ utest

run_utest:
	$(MAKE) -C ./epid/common-testhelper/ run_utest
	$(MAKE) -C ./epid/common/ run_utest
	$(MAKE) -C ./epid/member/ run_utest
	$(MAKE) -C ./epid/verifier/ run_utest

check: utest run_utest

examples:
	$(MAKE) -C ./example/ all

epid_tools:
	$(MAKE) -C ./tools/ all

perf:
ifneq ("$(wildcard ./ext/google_benchmark/)","")
	$(MAKE) -C ./ext/google_benchmark/ all
	$(MAKE) -C ./ext/google_benchmark/ utest
	$(MAKE) -C ./ext/google_benchmark/ run_utest
endif

build: all check install
