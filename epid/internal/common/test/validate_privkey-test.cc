/*############################################################################
  # Copyright 2019 Intel Corporation
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  ############################################################################*/
/// Private Key validation unit tests.
/*! \file */

#include <vector>
#include "gtest/gtest.h"
extern "C" {
#include "common/validate_privkey.h"
#include "epid/types.h"
}

namespace {
namespace group_7fffffee {
extern const std::vector<uint8_t> kPubKey;
extern const std::vector<uint8_t> kPubKeyInvalidH1;
extern const std::vector<uint8_t> kPubKeyInvalidH2;
extern const std::vector<uint8_t> kPubKeyInvalidW;
extern const std::vector<uint8_t> kValidNonSplitPrivKey;
extern const std::vector<uint8_t> kValidSplitPrivKey;
extern const std::vector<uint8_t> kPrivKeyInvalidA;
extern const std::vector<uint8_t> kPrivKeyInvalidx;
extern const std::vector<uint8_t> kPrivKeyInvalidf;
extern const std::vector<uint8_t> kPrivKeyNotInGroup;
}  // namespace group_7fffffee
namespace group_7fffffaa {
extern const std::vector<uint8_t> kPubKey;
}  // namespace group_7fffffaa
////////////////////////////////////////////////////////////////////////////////
TEST(ValidateNonSplitPrivateKey, ConfirmsNonSplitKeyInGroup) {
  EpidStatus sts = kEpidErr;
  PrivKey const* valid_privkey =
      (PrivKey const*)group_7fffffee::kValidNonSplitPrivKey.data();
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidateNonSplitPrivateKey(valid_privkey, pub_key);
  EXPECT_EQ(kEpidNoErr, sts);
}
TEST(ValidateNonSplitPrivateKey, DetectsKeyNotInGroup) {
  EpidStatus sts = kEpidErr;
  PrivKey const* split_privkey =
      (PrivKey const*)group_7fffffee::kValidSplitPrivKey.data();
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidateNonSplitPrivateKey(split_privkey, pub_key);
  EXPECT_EQ(kEpidKeyNotInGroupErr, sts);

  PrivKey const* non_split_privkey =
      (PrivKey const*)group_7fffffee::kValidNonSplitPrivKey.data();
  GroupPubKey const* pub_key_grp7fffffaa =
      (GroupPubKey const*)group_7fffffaa::kPubKey.data();
  sts = EpidValidateNonSplitPrivateKey(non_split_privkey, pub_key_grp7fffffaa);
  EXPECT_EQ(kEpidKeyNotInGroupErr, sts);
}

TEST(ValidateNonSplitPrivateKey, RejectsInvalidPrivateKey) {
  EpidStatus sts = kEpidErr;
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidateNonSplitPrivateKey(nullptr, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidA =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidA.data();
  sts = EpidValidateNonSplitPrivateKey(privkey_invalidA, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidx =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidx.data();
  sts = EpidValidateNonSplitPrivateKey(privkey_invalidx, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidf =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidf.data();
  sts = EpidValidateNonSplitPrivateKey(privkey_invalidf, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);
}

TEST(ValidateNonSplitPrivateKey, RejectsInvalidPublicKey) {
  EpidStatus sts = kEpidErr;
  PrivKey const* privkey =
      (PrivKey const*)group_7fffffee::kValidNonSplitPrivKey.data();
  sts = EpidValidateNonSplitPrivateKey(privkey, nullptr);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
  GroupPubKey const* pub_key_invalid_h1 =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidH1.data();
  sts = EpidValidateNonSplitPrivateKey(privkey, pub_key_invalid_h1);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);

  GroupPubKey const* pub_key_invalid_h2 =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidH2.data();
  sts = EpidValidateNonSplitPrivateKey(privkey, pub_key_invalid_h2);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);

  GroupPubKey const* pub_key_invalid_w =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidW.data();
  sts = EpidValidateNonSplitPrivateKey(privkey, pub_key_invalid_w);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
}

////////////////////////////////////////////////////////////////////////////////

TEST(ValidateSplitPrivateKey, ConfirmsSplitKeyInGroup) {
  EpidStatus sts = kEpidErr;
  PrivKey const* valid_privkey =
      (PrivKey const*)group_7fffffee::kValidSplitPrivKey.data();
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidateSplitPrivateKey(valid_privkey, pub_key);
  EXPECT_EQ(kEpidNoErr, sts);
}

TEST(ValidateSplitPrivateKey, DetectsKeyNotInGroup) {
  EpidStatus sts = kEpidErr;
  PrivKey const* nonsplit_privkey =
      (PrivKey const*)group_7fffffee::kValidNonSplitPrivKey.data();
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidateSplitPrivateKey(nonsplit_privkey, pub_key);
  EXPECT_EQ(kEpidKeyNotInGroupErr, sts);

  PrivKey const* split_privkey =
      (PrivKey const*)group_7fffffee::kValidSplitPrivKey.data();
  GroupPubKey const* pub_key_grp7fffffaa =
      (GroupPubKey const*)group_7fffffaa::kPubKey.data();
  sts = EpidValidateNonSplitPrivateKey(split_privkey, pub_key_grp7fffffaa);
  EXPECT_EQ(kEpidKeyNotInGroupErr, sts);
}

TEST(ValidateSplitPrivateKey, RejectsInvalidPrivateKey) {
  EpidStatus sts = kEpidErr;
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidateSplitPrivateKey(nullptr, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidA =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidA.data();
  sts = EpidValidateSplitPrivateKey(privkey_invalidA, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidx =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidx.data();
  sts = EpidValidateSplitPrivateKey(privkey_invalidx, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidf =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidf.data();
  sts = EpidValidateSplitPrivateKey(privkey_invalidf, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);
}

TEST(ValidateSplitPrivateKey, RejectsInvalidPublicKey) {
  EpidStatus sts = kEpidErr;
  PrivKey const* privkey =
      (PrivKey const*)group_7fffffee::kValidSplitPrivKey.data();
  sts = EpidValidateSplitPrivateKey(privkey, nullptr);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
  GroupPubKey const* pub_key_invalid_h1 =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidH1.data();
  sts = EpidValidateSplitPrivateKey(privkey, pub_key_invalid_h1);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);

  GroupPubKey const* pub_key_invalid_h2 =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidH2.data();
  sts = EpidValidateSplitPrivateKey(privkey, pub_key_invalid_h2);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);

  GroupPubKey const* pub_key_invalid_w =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidW.data();
  sts = EpidValidateSplitPrivateKey(privkey, pub_key_invalid_w);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
}

////////////////////////////////////////////////////////////////////////////////

TEST(ValidatePrivateKey, ConfirmsKeyInGroup) {
  EpidStatus sts = kEpidErr;
  PrivKey const* valid_nonsplit_privkey =
      (PrivKey const*)group_7fffffee::kValidNonSplitPrivKey.data();
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidatePrivateKey(valid_nonsplit_privkey, pub_key);
  EXPECT_EQ(kEpidNoErr, sts);

  PrivKey const* valid_split_privkey =
      (PrivKey const*)group_7fffffee::kValidSplitPrivKey.data();
  sts = EpidValidateSplitPrivateKey(valid_split_privkey, pub_key);
  EXPECT_EQ(kEpidNoErr, sts);
}

TEST(ValidatePrivateKey, DetectsKeyNotInGroup) {
  EpidStatus sts = kEpidErr;
  PrivKey const* split_privkey =
      (PrivKey const*)group_7fffffee::kValidSplitPrivKey.data();
  GroupPubKey const* pub_key_grp7fffffaa =
      (GroupPubKey const*)group_7fffffaa::kPubKey.data();
  sts = EpidValidatePrivateKey(split_privkey, pub_key_grp7fffffaa);
  EXPECT_EQ(kEpidKeyNotInGroupErr, sts);
}

TEST(ValidatePrivateKey, RejectsInvalidPrivateKey) {
  EpidStatus sts = kEpidErr;
  GroupPubKey const* pub_key =
      (GroupPubKey const*)group_7fffffee::kPubKey.data();
  sts = EpidValidatePrivateKey(nullptr, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidA =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidA.data();
  sts = EpidValidatePrivateKey(privkey_invalidA, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidx =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidx.data();
  sts = EpidValidatePrivateKey(privkey_invalidx, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);

  PrivKey const* privkey_invalidf =
      (PrivKey const*)group_7fffffee::kPrivKeyInvalidf.data();
  sts = EpidValidatePrivateKey(privkey_invalidf, pub_key);
  EXPECT_EQ(kEpidBadPrivKeyErr, sts);
}

TEST(ValidatePrivateKey, RejectsInvalidPublicKey) {
  EpidStatus sts = kEpidErr;
  PrivKey const* privkey =
      (PrivKey const*)group_7fffffee::kValidSplitPrivKey.data();
  sts = EpidValidatePrivateKey(privkey, nullptr);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
  GroupPubKey const* pub_key_invalid_h1 =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidH1.data();
  sts = EpidValidatePrivateKey(privkey, pub_key_invalid_h1);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);

  GroupPubKey const* pub_key_invalid_h2 =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidH2.data();
  sts = EpidValidatePrivateKey(privkey, pub_key_invalid_h2);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);

  GroupPubKey const* pub_key_invalid_w =
      (GroupPubKey const*)group_7fffffee::kPubKeyInvalidW.data();
  sts = EpidValidatePrivateKey(privkey, pub_key_invalid_w);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
}

namespace group_7fffffee {
const std::vector<uint8_t> kPubKey = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x6b, 0x0d, 0x77, 0xf4,
    0xe5, 0xbd, 0x85, 0x11, 0x1d, 0xa3, 0x34, 0x4b, 0xf0, 0x8b, 0x77, 0xc0,
    0xb5, 0x64, 0xc3, 0x87, 0x71, 0x62, 0x06, 0x6b, 0xfc, 0x0c, 0x56, 0xed,
    0xb7, 0x20, 0x96, 0x52,
    // h2
    0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x33, 0xf5, 0x1d, 0x34,
    0x52, 0x79, 0x5b, 0x5f, 0xd8, 0x52, 0x2a, 0x57, 0x92, 0xb2, 0xb0, 0x88,
    0x94, 0x77, 0x85, 0x7b, 0x89, 0xb2, 0xc4, 0xf9, 0xa4, 0x2c, 0xe0, 0xc5,
    0xaf, 0xbf, 0x30, 0x66,
    // w
    0x0c, 0xae, 0x28, 0x31, 0xd9, 0x53, 0x90, 0xb6, 0xac, 0x9a, 0x48, 0xc9,
    0x51, 0x38, 0xc0, 0x37, 0x29, 0x37, 0x88, 0xcc, 0xad, 0x91, 0xe7, 0xab,
    0xe9, 0x0d, 0xc0, 0xa5, 0x01, 0xcd, 0x4b, 0x55, 0x36, 0xe0, 0x6b, 0x70,
    0x6b, 0x00, 0xb0, 0x09, 0x54, 0x91, 0xce, 0xb7, 0xca, 0xa3, 0x31, 0x88,
    0x6b, 0x4a, 0x45, 0x85, 0x99, 0x64, 0x6e, 0x99, 0xf0, 0x9e, 0xf2, 0x4e,
    0x02, 0xc7, 0x7f, 0x40, 0xff, 0xa6, 0x33, 0x2e, 0x28, 0x07, 0x8e, 0x3c,
    0x79, 0x24, 0x75, 0xb7, 0x8d, 0xe0, 0x20, 0x75, 0x3c, 0x04, 0xba, 0xe6,
    0x22, 0xeb, 0x72, 0xa2, 0x79, 0x4c, 0x68, 0x70, 0x04, 0xa4, 0x55, 0x23,
    0x59, 0x8f, 0x83, 0x37, 0x23, 0x3a, 0x44, 0xa4, 0x3f, 0x9f, 0xbc, 0x6e,
    0xac, 0x69, 0xb8, 0x59, 0xcb, 0x03, 0x4e, 0xc2, 0x38, 0x07, 0xb1, 0x90,
    0xa2, 0xcd, 0xa7, 0x1c, 0x72, 0x48, 0x02, 0xfb};
const std::vector<uint8_t> kPubKeyInvalidH1 = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    // h2
    0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x33, 0xf5, 0x1d, 0x34,
    0x52, 0x79, 0x5b, 0x5f, 0xd8, 0x52, 0x2a, 0x57, 0x92, 0xb2, 0xb0, 0x88,
    0x94, 0x77, 0x85, 0x7b, 0x89, 0xb2, 0xc4, 0xf9, 0xa4, 0x2c, 0xe0, 0xc5,
    0xaf, 0xbf, 0x30, 0x66,
    // w
    0x0c, 0xae, 0x28, 0x31, 0xd9, 0x53, 0x90, 0xb6, 0xac, 0x9a, 0x48, 0xc9,
    0x51, 0x38, 0xc0, 0x37, 0x29, 0x37, 0x88, 0xcc, 0xad, 0x91, 0xe7, 0xab,
    0xe9, 0x0d, 0xc0, 0xa5, 0x01, 0xcd, 0x4b, 0x55, 0x36, 0xe0, 0x6b, 0x70,
    0x6b, 0x00, 0xb0, 0x09, 0x54, 0x91, 0xce, 0xb7, 0xca, 0xa3, 0x31, 0x88,
    0x6b, 0x4a, 0x45, 0x85, 0x99, 0x64, 0x6e, 0x99, 0xf0, 0x9e, 0xf2, 0x4e,
    0x02, 0xc7, 0x7f, 0x40, 0xff, 0xa6, 0x33, 0x2e, 0x28, 0x07, 0x8e, 0x3c,
    0x79, 0x24, 0x75, 0xb7, 0x8d, 0xe0, 0x20, 0x75, 0x3c, 0x04, 0xba, 0xe6,
    0x22, 0xeb, 0x72, 0xa2, 0x79, 0x4c, 0x68, 0x70, 0x04, 0xa4, 0x55, 0x23,
    0x59, 0x8f, 0x83, 0x37, 0x23, 0x3a, 0x44, 0xa4, 0x3f, 0x9f, 0xbc, 0x6e,
    0xac, 0x69, 0xb8, 0x59, 0xcb, 0x03, 0x4e, 0xc2, 0x38, 0x07, 0xb1, 0x90,
    0xa2, 0xcd, 0xa7, 0x1c, 0x72, 0x48, 0x02, 0xfb};
const std::vector<uint8_t> kPubKeyInvalidH2 = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x6b, 0x0d, 0x77, 0xf4,
    0xe5, 0xbd, 0x85, 0x11, 0x1d, 0xa3, 0x34, 0x4b, 0xf0, 0x8b, 0x77, 0xc0,
    0xb5, 0x64, 0xc3, 0x87, 0x71, 0x62, 0x06, 0x6b, 0xfc, 0x0c, 0x56, 0xed,
    0xb7, 0x20, 0x96, 0x52,
    // h2
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    // w
    0x0c, 0xae, 0x28, 0x31, 0xd9, 0x53, 0x90, 0xb6, 0xac, 0x9a, 0x48, 0xc9,
    0x51, 0x38, 0xc0, 0x37, 0x29, 0x37, 0x88, 0xcc, 0xad, 0x91, 0xe7, 0xab,
    0xe9, 0x0d, 0xc0, 0xa5, 0x01, 0xcd, 0x4b, 0x55, 0x36, 0xe0, 0x6b, 0x70,
    0x6b, 0x00, 0xb0, 0x09, 0x54, 0x91, 0xce, 0xb7, 0xca, 0xa3, 0x31, 0x88,
    0x6b, 0x4a, 0x45, 0x85, 0x99, 0x64, 0x6e, 0x99, 0xf0, 0x9e, 0xf2, 0x4e,
    0x02, 0xc7, 0x7f, 0x40, 0xff, 0xa6, 0x33, 0x2e, 0x28, 0x07, 0x8e, 0x3c,
    0x79, 0x24, 0x75, 0xb7, 0x8d, 0xe0, 0x20, 0x75, 0x3c, 0x04, 0xba, 0xe6,
    0x22, 0xeb, 0x72, 0xa2, 0x79, 0x4c, 0x68, 0x70, 0x04, 0xa4, 0x55, 0x23,
    0x59, 0x8f, 0x83, 0x37, 0x23, 0x3a, 0x44, 0xa4, 0x3f, 0x9f, 0xbc, 0x6e,
    0xac, 0x69, 0xb8, 0x59, 0xcb, 0x03, 0x4e, 0xc2, 0x38, 0x07, 0xb1, 0x90,
    0xa2, 0xcd, 0xa7, 0x1c, 0x72, 0x48, 0x02, 0xfb};
const std::vector<uint8_t> kPubKeyInvalidW = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x6b, 0x0d, 0x77, 0xf4,
    0xe5, 0xbd, 0x85, 0x11, 0x1d, 0xa3, 0x34, 0x4b, 0xf0, 0x8b, 0x77, 0xc0,
    0xb5, 0x64, 0xc3, 0x87, 0x71, 0x62, 0x06, 0x6b, 0xfc, 0x0c, 0x56, 0xed,
    0xb7, 0x20, 0x96, 0x52,
    // h2
    0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x33, 0xf5, 0x1d, 0x34,
    0x52, 0x79, 0x5b, 0x5f, 0xd8, 0x52, 0x2a, 0x57, 0x92, 0xb2, 0xb0, 0x88,
    0x94, 0x77, 0x85, 0x7b, 0x89, 0xb2, 0xc4, 0xf9, 0xa4, 0x2c, 0xe0, 0xc5,
    0xaf, 0xbf, 0x30, 0x66,
    // w
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
const std::vector<uint8_t> kValidSplitPrivKey = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // A
    0xfc, 0xc2, 0x83, 0xf0, 0xb7, 0xbc, 0x8d, 0xcc, 0x3d, 0x35, 0x6b, 0xd3,
    0x40, 0xf9, 0x6d, 0x9a, 0x00, 0x33, 0x31, 0xc5, 0xf1, 0xb3, 0x5b, 0xeb,
    0x7e, 0x79, 0xc9, 0xfa, 0xcc, 0x6c, 0x80, 0x4d, 0xd7, 0x6c, 0x48, 0x48,
    0xaf, 0xcd, 0xa8, 0x26, 0x08, 0x55, 0x2e, 0x6d, 0x7f, 0x45, 0xb6, 0x9f,
    0x5a, 0xc5, 0xdc, 0xa0, 0x67, 0xf9, 0xf5, 0x71, 0x4b, 0xae, 0xdc, 0xd3,
    0xd1, 0x71, 0x34, 0x41,
    // x
    0xd2, 0x5d, 0x52, 0x68, 0x3d, 0x32, 0x47, 0x0e, 0xf6, 0x02, 0x13, 0x43,
    0xbf, 0x28, 0x23, 0x94, 0xff, 0x34, 0xaa, 0x34, 0x5b, 0xb7, 0x7c, 0xc8,
    0x8d, 0xd9, 0x9e, 0xe1, 0x1f, 0xf2, 0x2a, 0xa3,
    // f
    0x48, 0x40, 0xb5, 0x6c, 0x6d, 0x47, 0x09, 0x0b, 0x05, 0xd6, 0x43, 0x56,
    0xe0, 0x7c, 0xc6, 0x8e, 0xa1, 0x65, 0x67, 0xfd, 0xa7, 0x07, 0x87, 0x9b,
    0x36, 0x2d, 0x41, 0x35, 0x63, 0x61, 0x31, 0xc7};
const std::vector<uint8_t> kValidNonSplitPrivKey = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // A
    0x5b, 0x5d, 0xdf, 0xba, 0x7d, 0xb1, 0x78, 0xf3, 0x5a, 0xed, 0xa2, 0xab,
    0xfd, 0x78, 0xe6, 0x9c, 0x6e, 0xa2, 0x8a, 0x54, 0x63, 0xa9, 0x79, 0x3b,
    0x71, 0xb8, 0x2c, 0x36, 0x2e, 0xcc, 0xe6, 0x5e, 0x73, 0xd7, 0x41, 0xd9,
    0x96, 0xe3, 0xcf, 0x72, 0x30, 0x20, 0x43, 0xe5, 0x4f, 0xc0, 0x14, 0x68,
    0xda, 0x81, 0xa1, 0x2c, 0x06, 0x1f, 0xe0, 0xc8, 0x50, 0xd5, 0xc1, 0xf7,
    0x3b, 0xbb, 0x4c, 0xea,
    // x
    0xD2, 0x5D, 0x52, 0x68, 0x3D, 0x32, 0x47, 0x0E, 0xF6, 0x02, 0x13, 0x43,
    0xBF, 0x28, 0x23, 0x94, 0xFF, 0x34, 0xAA, 0x34, 0x5B, 0xB7, 0x7C, 0xC8,
    0x8D, 0xD9, 0x9E, 0xE1, 0x1F, 0xF2, 0x2A, 0xA3,
    // f
    0x48, 0x40, 0xb5, 0x6c, 0x6d, 0x47, 0x09, 0x0b, 0x05, 0xd6, 0x43, 0x56,
    0xe0, 0x7c, 0xc6, 0x8e, 0xa1, 0x65, 0x67, 0xfd, 0xa7, 0x07, 0x87, 0x9b,
    0x36, 0x2d, 0x41, 0x35, 0x63, 0x61, 0x31, 0xc7};
const std::vector<uint8_t> kPrivKeyInvalidA = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // A
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    // x
    0xD2, 0x5D, 0x52, 0x68, 0x3D, 0x32, 0x47, 0x0E, 0xF6, 0x02, 0x13, 0x43,
    0xBF, 0x28, 0x23, 0x94, 0xFF, 0x34, 0xAA, 0x34, 0x5B, 0xB7, 0x7C, 0xC8,
    0x8D, 0xD9, 0x9E, 0xE1, 0x1F, 0xF2, 0x2A, 0xA3,
    // f
    0x48, 0x40, 0xb5, 0x6c, 0x6d, 0x47, 0x09, 0x0b, 0x05, 0xd6, 0x43, 0x56,
    0xe0, 0x7c, 0xc6, 0x8e, 0xa1, 0x65, 0x67, 0xfd, 0xa7, 0x07, 0x87, 0x9b,
    0x36, 0x2d, 0x41, 0x35, 0x63, 0x61, 0x31, 0xc7};
const std::vector<uint8_t> kPrivKeyInvalidx = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // A
    0x5b, 0x5d, 0xdf, 0xba, 0x7d, 0xb1, 0x78, 0xf3, 0x5a, 0xed, 0xa2, 0xab,
    0xfd, 0x78, 0xe6, 0x9c, 0x6e, 0xa2, 0x8a, 0x54, 0x63, 0xa9, 0x79, 0x3b,
    0x71, 0xb8, 0x2c, 0x36, 0x2e, 0xcc, 0xe6, 0x5e, 0x73, 0xd7, 0x41, 0xd9,
    0x96, 0xe3, 0xcf, 0x72, 0x30, 0x20, 0x43, 0xe5, 0x4f, 0xc0, 0x14, 0x68,
    0xda, 0x81, 0xa1, 0x2c, 0x06, 0x1f, 0xe0, 0xc8, 0x50, 0xd5, 0xc1, 0xf7,
    0x3b, 0xbb, 0x4c, 0xea,
    // x
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // f
    0x48, 0x40, 0xb5, 0x6c, 0x6d, 0x47, 0x09, 0x0b, 0x05, 0xd6, 0x43, 0x56,
    0xe0, 0x7c, 0xc6, 0x8e, 0xa1, 0x65, 0x67, 0xfd, 0xa7, 0x07, 0x87, 0x9b,
    0x36, 0x2d, 0x41, 0x35, 0x63, 0x61, 0x31, 0xc7};
const std::vector<uint8_t> kPrivKeyInvalidf = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // A
    0x5b, 0x5d, 0xdf, 0xba, 0x7d, 0xb1, 0x78, 0xf3, 0x5a, 0xed, 0xa2, 0xab,
    0xfd, 0x78, 0xe6, 0x9c, 0x6e, 0xa2, 0x8a, 0x54, 0x63, 0xa9, 0x79, 0x3b,
    0x71, 0xb8, 0x2c, 0x36, 0x2e, 0xcc, 0xe6, 0x5e, 0x73, 0xd7, 0x41, 0xd9,
    0x96, 0xe3, 0xcf, 0x72, 0x30, 0x20, 0x43, 0xe5, 0x4f, 0xc0, 0x14, 0x68,
    0xda, 0x81, 0xa1, 0x2c, 0x06, 0x1f, 0xe0, 0xc8, 0x50, 0xd5, 0xc1, 0xf7,
    0x3b, 0xbb, 0x4c, 0xea,
    // x
    0xD2, 0x5D, 0x52, 0x68, 0x3D, 0x32, 0x47, 0x0E, 0xF6, 0x02, 0x13, 0x43,
    0xBF, 0x28, 0x23, 0x94, 0xFF, 0x34, 0xAA, 0x34, 0x5B, 0xB7, 0x7C, 0xC8,
    0x8D, 0xD9, 0x9E, 0xE1, 0x1F, 0xF2, 0x2A, 0xA3,
    // f
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
const std::vector<uint8_t> kPrivKeyNotInGroup = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // A
    0x63, 0xd3, 0x48, 0x19, 0x93, 0x92, 0x3d, 0xfc, 0x78, 0xcc, 0x01, 0x3f,
    0x2a, 0x29, 0x73, 0xd8, 0x1b, 0x9a, 0xbe, 0x70, 0x66, 0x71, 0xfa, 0x47,
    0x66, 0xc5, 0xd4, 0xe5, 0x07, 0xcb, 0xe2, 0x51, 0x47, 0x4a, 0x06, 0x9a,
    0x29, 0xeb, 0x99, 0x0e, 0x1b, 0x6b, 0x24, 0x88, 0x8f, 0x11, 0x4b, 0x9d,
    0xb4, 0x82, 0xf6, 0x04, 0x79, 0xde, 0x9b, 0xe7, 0x83, 0x63, 0x27, 0x91,
    0x46, 0xa8, 0x52, 0x27,
    // x
    0xD2, 0x5D, 0x52, 0x68, 0x3D, 0x32, 0x47, 0x0E, 0xF6, 0x02, 0x13, 0x43,
    0xBF, 0x28, 0x23, 0x94, 0xFF, 0x34, 0xAA, 0x34, 0x5B, 0xB7, 0x7C, 0xC8,
    0x8D, 0xD9, 0x9E, 0xE1, 0x1F, 0xF2, 0x2A, 0xA3,
    // f
    0x48, 0x40, 0xb5, 0x6c, 0x6d, 0x47, 0x09, 0x0b, 0x05, 0xd6, 0x43, 0x56,
    0xe0, 0x7c, 0xc6, 0x8e, 0xa1, 0x65, 0x67, 0xfd, 0xa7, 0x07, 0x87, 0x9b,
    0x36, 0x2d, 0x41, 0x35, 0x63, 0x61, 0x31, 0xc7};
}  // namespace group_7fffffee
namespace group_7fffffaa {
const std::vector<uint8_t> kPubKey = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xaa,
    // h1
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x6b, 0x0d, 0x77, 0xf4,
    0xe5, 0xbd, 0x85, 0x11, 0x1d, 0xa3, 0x34, 0x4b, 0xf0, 0x8b, 0x77, 0xc0,
    0xb5, 0x64, 0xc3, 0x87, 0x71, 0x62, 0x06, 0x6b, 0xfc, 0x0c, 0x56, 0xed,
    0xb7, 0x20, 0x96, 0x52,
    // h2
    0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x33, 0xf5, 0x1d, 0x34,
    0x52, 0x79, 0x5b, 0x5f, 0xd8, 0x52, 0x2a, 0x57, 0x92, 0xb2, 0xb0, 0x88,
    0x94, 0x77, 0x85, 0x7b, 0x89, 0xb2, 0xc4, 0xf9, 0xa4, 0x2c, 0xe0, 0xc5,
    0xaf, 0xbf, 0x30, 0x66,
    // w
    0x0c, 0xae, 0x28, 0x31, 0xd9, 0x53, 0x90, 0xb6, 0xac, 0x9a, 0x48, 0xc9,
    0x51, 0x38, 0xc0, 0x37, 0x29, 0x37, 0x88, 0xcc, 0xad, 0x91, 0xe7, 0xab,
    0xe9, 0x0d, 0xc0, 0xa5, 0x01, 0xcd, 0x4b, 0x55, 0x36, 0xe0, 0x6b, 0x70,
    0x6b, 0x00, 0xb0, 0x09, 0x54, 0x91, 0xce, 0xb7, 0xca, 0xa3, 0x31, 0x88,
    0x6b, 0x4a, 0x45, 0x85, 0x99, 0x64, 0x6e, 0x99, 0xf0, 0x9e, 0xf2, 0x4e,
    0x02, 0xc7, 0x7f, 0x40, 0xff, 0xa6, 0x33, 0x2e, 0x28, 0x07, 0x8e, 0x3c,
    0x79, 0x24, 0x75, 0xb7, 0x8d, 0xe0, 0x20, 0x75, 0x3c, 0x04, 0xba, 0xe6,
    0x22, 0xeb, 0x72, 0xa2, 0x79, 0x4c, 0x68, 0x70, 0x04, 0xa4, 0x55, 0x23,
    0x59, 0x8f, 0x83, 0x37, 0x23, 0x3a, 0x44, 0xa4, 0x3f, 0x9f, 0xbc, 0x6e,
    0xac, 0x69, 0xb8, 0x59, 0xcb, 0x03, 0x4e, 0xc2, 0x38, 0x07, 0xb1, 0x90,
    0xa2, 0xcd, 0xa7, 0x1c, 0x72, 0x48, 0x02, 0xfb};
}  // namespace group_7fffffaa
}  // namespace
