/*############################################################################
  # Copyright 2018-2019 Intel Corporation
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  ############################################################################*/
/// VerifierSetGroup unit tests.
/*! \file */

#include <cstdint>
#include <vector>

#include "gtest/gtest.h"
#include "testhelper/epid_gtest-testhelper.h"

#include "epid/verifier.h"

#include "testhelper/errors-testhelper.h"

namespace {
extern const std::vector<uint8_t> kMsg0;
extern const std::vector<uint8_t> kBsn0;
extern const std::vector<uint8_t> kGroupRl;
extern const std::vector<uint8_t> kPubKeyInvalidGid;
extern const std::vector<uint8_t> kPubKeyInvalidH1;
extern const std::vector<uint8_t> kPubKeyInvalidH2;
extern const std::vector<uint8_t> kPubKeyInvalidW;
namespace grp_x {
extern const std::vector<uint8_t> kPubkey;
extern const std::vector<uint8_t> kPrecomp;
extern const std::vector<uint8_t> kPrivRl;
extern const std::vector<uint8_t> kSigRl;
extern const std::vector<uint8_t> kVerRl;
namespace member0 {
extern const std::vector<uint8_t> kSig;
}  // namespace member0
}  // namespace grp_x

class VerifierCtxFixture : public ::testing::Test {
 protected:
  VerifierCtxFixture();
  ~VerifierCtxFixture();

  VerifierCtx* ctx_;
  std::vector<uint8_t> ctx_data_;
};

class VerifierSetGroup : public VerifierCtxFixture {};
class VerifierWithoutGroupSet : public VerifierCtxFixture {};

////////////////////////////////////////////////////////////////////////////////
TEST_F(VerifierSetGroup, SetsGroup) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  GroupPubKey const* pubkey = (GroupPubKey const*)grp_x::kPubkey.data();
  VerifierPrecomp const* precomp =
      (VerifierPrecomp const*)grp_x::kPrecomp.data();
  PrivRl const* priv_rl = (PrivRl const*)grp_x::kPrivRl.data();
  size_t priv_rl_size = grp_x::kPrivRl.size();
  SigRl const* sig_rl = (SigRl const*)grp_x::kSigRl.data();
  size_t sig_rl_size = grp_x::kSigRl.size();

  sts = EpidVerifierSetGroup(ctx, pubkey, precomp, priv_rl, priv_rl_size,
                             sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidNoErr, sts);
}
TEST_F(VerifierSetGroup, AcceptsNullPrecomp) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  GroupPubKey const* pubkey = (GroupPubKey const*)grp_x::kPubkey.data();
  PrivRl const* priv_rl = (PrivRl const*)grp_x::kPrivRl.data();
  size_t priv_rl_size = grp_x::kPrivRl.size();
  SigRl const* sig_rl = (SigRl const*)grp_x::kSigRl.data();
  size_t sig_rl_size = grp_x::kSigRl.size();

  sts = EpidVerifierSetGroup(ctx, pubkey, nullptr, priv_rl, priv_rl_size,
                             sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidNoErr, sts);
}

TEST_F(VerifierSetGroup, AcceptsNullRls) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  GroupPubKey const* pubkey = (GroupPubKey const*)grp_x::kPubkey.data();
  VerifierPrecomp const* precomp =
      (VerifierPrecomp const*)grp_x::kPrecomp.data();

  sts = EpidVerifierSetGroup(ctx, pubkey, precomp, nullptr, 0, nullptr, 0);
  EXPECT_EQ(kEpidNoErr, sts);
}

TEST_F(VerifierSetGroup, RejectsNullContext) {
  EpidStatus sts = kEpidNoErr;
  GroupPubKey const* pubkey = (GroupPubKey const*)grp_x::kPubkey.data();
  VerifierPrecomp const* precomp =
      (VerifierPrecomp const*)grp_x::kPrecomp.data();
  PrivRl const* priv_rl = (PrivRl const*)grp_x::kPrivRl.data();
  size_t priv_rl_size = grp_x::kPrivRl.size();
  SigRl const* sig_rl = (SigRl const*)grp_x::kSigRl.data();
  size_t sig_rl_size = grp_x::kSigRl.size();

  sts = EpidVerifierSetGroup(nullptr, pubkey, precomp, priv_rl, priv_rl_size,
                             sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidBadCtxErr, sts);
}
TEST_F(VerifierSetGroup, RejectsInvalidGroup) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  GroupPubKey const* pubkey_bad_gid =
      (GroupPubKey const*)kPubKeyInvalidGid.data();
  GroupPubKey const* pubkey_bad_h1 =
      (GroupPubKey const*)kPubKeyInvalidH1.data();
  GroupPubKey const* pubkey_bad_h2 =
      (GroupPubKey const*)kPubKeyInvalidH2.data();
  GroupPubKey const* pubkey_bad_w = (GroupPubKey const*)kPubKeyInvalidW.data();
  VerifierPrecomp const* precomp = nullptr;
  PrivRl const* priv_rl = nullptr;
  size_t priv_rl_size = 0;
  SigRl const* sig_rl = nullptr;
  size_t sig_rl_size = 0;

  sts = EpidVerifierSetGroup(ctx, pubkey_bad_gid, precomp, priv_rl,
                             priv_rl_size, sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidSchemaNotSupportedErr, sts);
  sts = EpidVerifierSetGroup(ctx, pubkey_bad_h1, precomp, priv_rl, priv_rl_size,
                             sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
  sts = EpidVerifierSetGroup(ctx, pubkey_bad_h2, precomp, priv_rl, priv_rl_size,
                             sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
  sts = EpidVerifierSetGroup(ctx, pubkey_bad_w, precomp, priv_rl, priv_rl_size,
                             sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidBadGroupPubKeyErr, sts);
}
TEST_F(VerifierWithoutGroupSet, ForbidsWritePrecomp) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  VerifierPrecomp precomp = {0};
  sts = EpidVerifierWritePrecomp(ctx, &precomp);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, ForbidsSetPrivRl) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  PrivRl const* priv_rl = (PrivRl const*)grp_x::kPrivRl.data();
  size_t priv_rl_size = grp_x::kPrivRl.size();
  sts = EpidVerifierSetPrivRl(ctx, priv_rl, priv_rl_size);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, ForbidsSetSigRl) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  SigRl const* sig_rl = (SigRl const*)grp_x::kSigRl.data();
  size_t sig_rl_size = grp_x::kSigRl.size();
  sts = EpidVerifierSetSigRl(ctx, sig_rl, sig_rl_size);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, ForbidsVerify) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  EpidSignature const* sig = (EpidSignature const*)grp_x::member0::kSig.data();
  size_t sig_len = grp_x::member0::kSig.size();
  void const* msg = kMsg0.data();
  size_t msg_len = kMsg0.size();
  sts = EpidVerify(ctx, sig, sig_len, msg, msg_len);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, ForbidsBlacklistSig) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  EpidSignature const* sig = (EpidSignature const*)grp_x::member0::kSig.data();
  size_t sig_len = grp_x::member0::kSig.size();
  void const* msg = kMsg0.data();
  size_t msg_len = kMsg0.size();
  sts = EpidBlacklistSig(ctx, sig, sig_len, msg, msg_len);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, AllowsSetHashAlg) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  HashAlg hash_alg = kSha256;
  sts = EpidVerifierSetHashAlg(ctx, hash_alg);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, AllowsSetBasename) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  void const* basename = kBsn0.data();
  size_t basename_len = kBsn0.size();
  sts = EpidVerifierSetBasename(ctx, basename, basename_len);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, ForbidsSetVerifierRl) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  VerifierRl* ver_rl = (VerifierRl*)grp_x::kVerRl.data();
  size_t ver_rl_size = grp_x::kVerRl.size();
  sts = EpidVerifierSetVerifierRl(ctx, ver_rl, ver_rl_size);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}
TEST_F(VerifierWithoutGroupSet, ForbidsWriteVerifierRl) {
  EpidStatus sts = kEpidNoErr;
  VerifierCtx* ctx = ctx_;
  std::vector<uint8_t> rl_buf(EpidGetVerifierRlSize(ctx));
  VerifierRl* ver_rl = (VerifierRl*)rl_buf.data();
  size_t ver_rl_size = rl_buf.size();
  sts = EpidWriteVerifierRl(ctx, ver_rl, ver_rl_size);
  EXPECT_EQ(kEpidOutOfSequenceError, sts);
}

////////////////////////////////////////////////////////////////////////////////
const std::vector<uint8_t> kMsg0 = {'m', 's', 'g', '0'};
const std::vector<uint8_t> kBsn0 = {'b', 's', 'n', '0'};

const std::vector<uint8_t> kGroupRl = {
#include "testhelper/testdata/grprl.inc"
};
const std::vector<uint8_t> kPubKeyInvalidGid = {
    // gid
    0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x6b, 0x0d, 0x77, 0xf4,
    0xe5, 0xbd, 0x85, 0x11, 0x1d, 0xa3, 0x34, 0x4b, 0xf0, 0x8b, 0x77, 0xc0,
    0xb5, 0x64, 0xc3, 0x87, 0x71, 0x62, 0x06, 0x6b, 0xfc, 0x0c, 0x56, 0xed,
    0xb7, 0x20, 0x96, 0x52,
    // h2
    0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x33, 0xf5, 0x1d, 0x34,
    0x52, 0x79, 0x5b, 0x5f, 0xd8, 0x52, 0x2a, 0x57, 0x92, 0xb2, 0xb0, 0x88,
    0x94, 0x77, 0x85, 0x7b, 0x89, 0xb2, 0xc4, 0xf9, 0xa4, 0x2c, 0xe0, 0xc5,
    0xaf, 0xbf, 0x30, 0x66,
    // w
    0x0c, 0xae, 0x28, 0x31, 0xd9, 0x53, 0x90, 0xb6, 0xac, 0x9a, 0x48, 0xc9,
    0x51, 0x38, 0xc0, 0x37, 0x29, 0x37, 0x88, 0xcc, 0xad, 0x91, 0xe7, 0xab,
    0xe9, 0x0d, 0xc0, 0xa5, 0x01, 0xcd, 0x4b, 0x55, 0x36, 0xe0, 0x6b, 0x70,
    0x6b, 0x00, 0xb0, 0x09, 0x54, 0x91, 0xce, 0xb7, 0xca, 0xa3, 0x31, 0x88,
    0x6b, 0x4a, 0x45, 0x85, 0x99, 0x64, 0x6e, 0x99, 0xf0, 0x9e, 0xf2, 0x4e,
    0x02, 0xc7, 0x7f, 0x40, 0xff, 0xa6, 0x33, 0x2e, 0x28, 0x07, 0x8e, 0x3c,
    0x79, 0x24, 0x75, 0xb7, 0x8d, 0xe0, 0x20, 0x75, 0x3c, 0x04, 0xba, 0xe6,
    0x22, 0xeb, 0x72, 0xa2, 0x79, 0x4c, 0x68, 0x70, 0x04, 0xa4, 0x55, 0x23,
    0x59, 0x8f, 0x83, 0x37, 0x23, 0x3a, 0x44, 0xa4, 0x3f, 0x9f, 0xbc, 0x6e,
    0xac, 0x69, 0xb8, 0x59, 0xcb, 0x03, 0x4e, 0xc2, 0x38, 0x07, 0xb1, 0x90,
    0xa2, 0xcd, 0xa7, 0x1c, 0x72, 0x48, 0x02, 0xfb};

const std::vector<uint8_t> kPubKeyInvalidH1 = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    // h2
    0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x33, 0xf5, 0x1d, 0x34,
    0x52, 0x79, 0x5b, 0x5f, 0xd8, 0x52, 0x2a, 0x57, 0x92, 0xb2, 0xb0, 0x88,
    0x94, 0x77, 0x85, 0x7b, 0x89, 0xb2, 0xc4, 0xf9, 0xa4, 0x2c, 0xe0, 0xc5,
    0xaf, 0xbf, 0x30, 0x66,
    // w
    0x0c, 0xae, 0x28, 0x31, 0xd9, 0x53, 0x90, 0xb6, 0xac, 0x9a, 0x48, 0xc9,
    0x51, 0x38, 0xc0, 0x37, 0x29, 0x37, 0x88, 0xcc, 0xad, 0x91, 0xe7, 0xab,
    0xe9, 0x0d, 0xc0, 0xa5, 0x01, 0xcd, 0x4b, 0x55, 0x36, 0xe0, 0x6b, 0x70,
    0x6b, 0x00, 0xb0, 0x09, 0x54, 0x91, 0xce, 0xb7, 0xca, 0xa3, 0x31, 0x88,
    0x6b, 0x4a, 0x45, 0x85, 0x99, 0x64, 0x6e, 0x99, 0xf0, 0x9e, 0xf2, 0x4e,
    0x02, 0xc7, 0x7f, 0x40, 0xff, 0xa6, 0x33, 0x2e, 0x28, 0x07, 0x8e, 0x3c,
    0x79, 0x24, 0x75, 0xb7, 0x8d, 0xe0, 0x20, 0x75, 0x3c, 0x04, 0xba, 0xe6,
    0x22, 0xeb, 0x72, 0xa2, 0x79, 0x4c, 0x68, 0x70, 0x04, 0xa4, 0x55, 0x23,
    0x59, 0x8f, 0x83, 0x37, 0x23, 0x3a, 0x44, 0xa4, 0x3f, 0x9f, 0xbc, 0x6e,
    0xac, 0x69, 0xb8, 0x59, 0xcb, 0x03, 0x4e, 0xc2, 0x38, 0x07, 0xb1, 0x90,
    0xa2, 0xcd, 0xa7, 0x1c, 0x72, 0x48, 0x02, 0xfb};

const std::vector<uint8_t> kPubKeyInvalidH2 = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x6b, 0x0d, 0x77, 0xf4,
    0xe5, 0xbd, 0x85, 0x11, 0x1d, 0xa3, 0x34, 0x4b, 0xf0, 0x8b, 0x77, 0xc0,
    0xb5, 0x64, 0xc3, 0x87, 0x71, 0x62, 0x06, 0x6b, 0xfc, 0x0c, 0x56, 0xed,
    0xb7, 0x20, 0x96, 0x52,
    // h2
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,
    // w
    0x0c, 0xae, 0x28, 0x31, 0xd9, 0x53, 0x90, 0xb6, 0xac, 0x9a, 0x48, 0xc9,
    0x51, 0x38, 0xc0, 0x37, 0x29, 0x37, 0x88, 0xcc, 0xad, 0x91, 0xe7, 0xab,
    0xe9, 0x0d, 0xc0, 0xa5, 0x01, 0xcd, 0x4b, 0x55, 0x36, 0xe0, 0x6b, 0x70,
    0x6b, 0x00, 0xb0, 0x09, 0x54, 0x91, 0xce, 0xb7, 0xca, 0xa3, 0x31, 0x88,
    0x6b, 0x4a, 0x45, 0x85, 0x99, 0x64, 0x6e, 0x99, 0xf0, 0x9e, 0xf2, 0x4e,
    0x02, 0xc7, 0x7f, 0x40, 0xff, 0xa6, 0x33, 0x2e, 0x28, 0x07, 0x8e, 0x3c,
    0x79, 0x24, 0x75, 0xb7, 0x8d, 0xe0, 0x20, 0x75, 0x3c, 0x04, 0xba, 0xe6,
    0x22, 0xeb, 0x72, 0xa2, 0x79, 0x4c, 0x68, 0x70, 0x04, 0xa4, 0x55, 0x23,
    0x59, 0x8f, 0x83, 0x37, 0x23, 0x3a, 0x44, 0xa4, 0x3f, 0x9f, 0xbc, 0x6e,
    0xac, 0x69, 0xb8, 0x59, 0xcb, 0x03, 0x4e, 0xc2, 0x38, 0x07, 0xb1, 0x90,
    0xa2, 0xcd, 0xa7, 0x1c, 0x72, 0x48, 0x02, 0xfb};

const std::vector<uint8_t> kPubKeyInvalidW = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7f, 0xff, 0xff, 0xee,
    // h1
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x6b, 0x0d, 0x77, 0xf4,
    0xe5, 0xbd, 0x85, 0x11, 0x1d, 0xa3, 0x34, 0x4b, 0xf0, 0x8b, 0x77, 0xc0,
    0xb5, 0x64, 0xc3, 0x87, 0x71, 0x62, 0x06, 0x6b, 0xfc, 0x0c, 0x56, 0xed,
    0xb7, 0x20, 0x96, 0x52,
    // h2
    0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x33, 0xf5, 0x1d, 0x34,
    0x52, 0x79, 0x5b, 0x5f, 0xd8, 0x52, 0x2a, 0x57, 0x92, 0xb2, 0xb0, 0x88,
    0x94, 0x77, 0x85, 0x7b, 0x89, 0xb2, 0xc4, 0xf9, 0xa4, 0x2c, 0xe0, 0xc5,
    0xaf, 0xbf, 0x30, 0x66,
    // w
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

namespace grp_x {
const std::vector<uint8_t> kPubkey = {
#include "testhelper/testdata/grp_x/pubkey.inc"
};
const std::vector<uint8_t> kPrecomp = {
#include "testhelper/testdata/grp_x/precomp.inc"
};
const std::vector<uint8_t> kPrivRl = {
#include "testhelper/testdata/grp_x/privrl.inc"
};
const std::vector<uint8_t> kSigRl = {
#include "testhelper/testdata/grp_x/sigrl.inc"
};
const std::vector<uint8_t> kVerRl = {
#include "testhelper/testdata/grp_x/verrevoked/bsn0/verrl.inc"
};
namespace member0 {
const std::vector<uint8_t> kSig = {
#include "testhelper/testdata/grp_x/member0/sig_sha256_bsn0_msg0.inc"
};
}  // namespace member0
}  // namespace grp_x
////////////////////////////////////////////////////////////////////////////////

VerifierCtxFixture::VerifierCtxFixture() : ctx_(nullptr) {
  EpidStatus sts = kEpidErr;
  size_t context_size = 0;
  sts = EpidVerifierGetSize(&context_size);
  if (kEpidNoErr != sts) {
    throw std::logic_error("EpidVerifierGetSize() failed during test setup");
  }
  // allocate and zero initialize
  ctx_data_.resize(context_size);
  ctx_ = (VerifierCtx*)ctx_data_.data();
  sts = EpidVerifierInit(nullptr, 0, ctx_);
  if (kEpidNoErr != sts) {
    throw std::logic_error("EpidVerifierInit() failed during test setup");
  }
}
VerifierCtxFixture::~VerifierCtxFixture() { EpidVerifierDeinit(ctx_); }
////////////////////////////////////////////////////////////////////////////////
}  // namespace
