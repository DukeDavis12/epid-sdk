############################################################################
# Copyright 2017-2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
############################################################################
# pylint:disable=undefined-variable,invalid-name
"""Build configuration for tpm2 library."""
import os
import glob

Import('*')

env.PartName('tpm2')

include_files = Pattern(src_dir='.', includes=['*.h'], recursive=False).files()

install_files = Pattern(
    src_dir='.',
    includes=['*.h', '*.c', '*-test.cc', '*-testhelper.cc', '*.parts'],
    recursive=True)

if 'install_package' in env['MODE']:
    env.InstallTopLevel(
        install_files, sub_dir='epid/member/split/${PART_SHORT_NAME}')
else:
    env.DependsOn([
        Component('epiddefs'),
        Component('ippmath'),
        Component('common'),
    ])

    env.Append(CPPPATH=[AbsDir('../headers'), AbsDir('../../include')])

    if 'use_tss' in env['MODE']:
        src_files = Pattern(
            src_dir='ibm_tss', includes=['*.c'], recursive=False).files()
        utest_files = Pattern(
            src_dir='unittests',
            includes=['*-test.cc', '*-testhelper.cc'],
            excludes=['*-simulator-test.cc'],
            recursive=False).files()
        if env['TARGET_ARCH'] == 'x86_64' and env['TARGET_PLATFORM']['OS'] == 'win32':
            PrintError("--use-tss is not compatible with x86_64 target. "
                       "Try an x86 build.")
        try:
            TSSROOT = os.environ['TSSROOT138']
        except KeyError as e:
            env.PrintError(
                "Necessary environment variable not set: ",
                e,
                show_stack=False)
        env.Append(CPPPATH=TSSROOT)
        env.Append(LIBPATH=TSSROOT)
        if env.get('MSVC_VERSION', None):
            env.Append(CCFLAGS=[
                '/wd4201',  # allow nameless struct
                '/wd4200',  # allow zero-sized array in struct
            ])
        elif env.get('CLANG_VERSION', None):
            # The following is a WORKAROUND to suppress compiler warning in
            # TPM_Types.h (external TPM/TSS header). TPM defines TPMS_EMPTY
            # structure that has size 0 in C and size 1 in C++ due to
            # its implementation.
            # Disabling warning in order to be able to build and run the code.
            # Justification:
            #   Only internal C code uses raw TPM interfaces and those are
            #   abstracted by Intel(R) EPID TPM functions. Thus, it is very
            #   unlikely that any C++ code is going to / able to access
            #   problematic code/logic.
            env.Append(CCFLAGS=['-Wno-extern-c-compat'])
        env.Append(CPPDEFINES=['TPM_TSS'])
    else:
        src_files = Pattern(
            src_dir='builtin', includes=['*.c'], recursive=False).files()

        utest_files = Pattern(
            src_dir='unittests',
            includes=['*-test.cc', '*-testhelper.cc'],
            excludes=['*-tss-test.cc'],
            recursive=False).files()

    testenv = env.Clone()
    testenv.Append(CPPPATH=[AbsDir('../headers'), AbsDir('../../include'), AbsDir('unittests')])

    outputs = env.Library('${PART_NAME}', src_files)
    env.Sdk(outputs)
    env.SdkInclude(include_files, sub_dir='epid/member/${PART_SHORT_NAME}')

    #unit tests
    testenv['UNIT_TEST_TARGET_NAME'] = "${PART_NAME}-${UNIT_TEST_TARGET}"

    utest = testenv.UnitTest(
        "utest",
        utest_files,
        command_args=[
            '--gtest_color=yes',
            '--gtest_print_time=1',
            '--gtest_output=xml',
            '--gtest_filter=**',
        ],
        make_pdb=(env.isConfigBasedOn('debug')
                  or env.isConfigBasedOn('static_crt_debug')),
        depends=[
            Component('gtest'),
            Component('testhelper'),
            Component('member.tpm2')
        ],
        INSTALL_BIN='${INSTALL_TEST_BIN}')

    if 'use_tss' in env['MODE']:
        # Build
        if env['TARGET_PLATFORM']['OS'] == 'win32':
            libpost = env['LIBSUFFIX']
            shlibpost = env['SHLIBSUFFIX']
        else:
            libpost = env['SHLIBSUFFIX']
            shlibpost = libpost

        tss_libname = env['LIBPREFIX'] + 'tss' + libpost
        tss_lib = env.SdkLib(os.path.join(TSSROOT, tss_libname))

        if env['TARGET_PLATFORM']['OS'] != 'win32':
            env.ExportLIBS(['crypto', 'tss'])
            env.ExportLIBPATH(TSSROOT)

        Depends(outputs, tss_lib)

        # Copy TSS
        testenv['CCOPY_LOGIC'] = 'copy'
        # specify install locations for tss library:
        # if on windows, copy to binaries that use tpm
        # if on linux, copy to lib
        install_locations = []
        if env['TARGET_PLATFORM']['OS'] == 'win32':
            install_locations = [
                "${INSTALL_TEST_BIN}",  # member tests use tss
                "${INSTALL_BIN}"  # joinreq/mprecmp use tss
            ]
        else:
            install_locations = ["${INSTALL_LIB}"]

        tss_shlibname = env['SHLIBPREFIX'] + 'tss' + shlibpost
        tss_shlibpath = os.path.join(TSSROOT, tss_shlibname)
        # find all tss libs:
        # on Windows:
        #   tss.dll
        # on Linux:
        #   libtss.so, libtss.so.<MAJOR_VERSION>, ...
        search_pattern = r'{0}*'.format(tss_shlibpath)
        tss_files_to_copy = glob.glob(search_pattern)

        if not tss_files_to_copy:
            env.PrintError(
                "Failed to find any tss libs by pattern: ",
                search_pattern,
                show_stack=False)

        for install_location in install_locations:
            for tss_file in tss_files_to_copy:
                tss_shlib = testenv.CCopy(install_location, tss_file)
                Depends(outputs, tss_shlib)
