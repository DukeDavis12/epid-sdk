############################################################################
# Copyright 2016-2018 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
############################################################################
Import('*')
env.PartName('common')

src_files = Pattern(src_dir='src',
                    includes=['*.c'],
                    recursive=False).files()
internal_headers = Pattern(src_dir='src',
                           includes=['*.h', '*.inc'],
                           recursive=False).files()
utest_files = Pattern(src_dir='unittests',
                      includes=['*-test.cc', '*-testhelper.cc'],
                      recursive=False).files()

epid11_headers = Pattern(src_dir='1.1',
                         includes=['*.h'],
                         recursive=False).files()
epid11_src_files = Pattern(src_dir='1.1/src',
                           includes=['*.c'],
                           recursive=False).files()
epid11_internal_headers = Pattern(src_dir='1.1/src',
                                  includes=['*.h', '*.inc'],
                                  recursive=False).files()
epid11_utest_files = Pattern(src_dir='1.1/unittests',
                             includes=['*-test.cc', '*-testhelper.cc'],
                             recursive=False).files()

math_headers = Pattern(src_dir='math',
                       includes=['*.h'],
                       recursive=False).files()
math_src_files = Pattern(src_dir='math/src',
                         includes=['*.c'],
                         recursive=False).files()
math_internal_headers = Pattern(src_dir='math/src',
                                includes=['*.h'],
                                recursive=False).files()
math_utest_files = Pattern(src_dir='math/unittests',
                           includes=['*-test.cc', '*-testhelper.cc'],
                           recursive=False).files()

build_files = Pattern(src_dir='.',
                      includes=['*.parts', 'Makefile'],
                      recursive=False).files()

env.DependsOn([
    Component('tinycommon', requires=REQ.HEADERS),
    Component('ippcp'),
])

env.Append(CPPPATH='#')

testenv = env.Clone()

env.SdkInclude(epid11_headers, sub_dir='epid/${PART_SHORT_NAME}/1.1')

outputs = env.Library('${PART_NAME}',
                      src_files + epid11_src_files + math_src_files)
env.Sdk(outputs)
if 'install_lib' in env['MODE']:
    env.InstallLib(outputs)
    env.InstallInclude(epid11_headers,
                       sub_dir='epid/${PART_SHORT_NAME}/1.1')

# unit tests
testenv['UNIT_TEST_TARGET_NAME'] = "${PART_NAME}-${UNIT_TEST_TARGET}"
testenv.UnitTest("utest",
                 utest_files + math_utest_files + epid11_utest_files,
                 command_args=[
                     '--gtest_color=yes',
                     '--gtest_print_time=1',
                     '--gtest_output=xml',
                     '--gtest_filter=**',
                 ],
                 make_pdb=(env.isConfigBasedOn('debug')),
                 depends=[Component('gtest'),
                          Component('common'),
                          Component('common-testhelper')],
                 INSTALL_BIN='${INSTALL_TEST_BIN}')
if env.get('fuzzer', False):
    env.Part(parts_file=env.subst('${PART_DIR}/fuzztests/fuzztests.parts'),
             INSTALL_BIN='${INSTALL_TEST_BIN}')

